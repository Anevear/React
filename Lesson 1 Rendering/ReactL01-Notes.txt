One-Way vs. Two-Way Data Flow
In contrast with other tools that also help with DOM manipulation, such as Angular, React embraces the concept of one-way data flow. This means that when using React, the view is generated by React, but does not communicate directly back to it. Instead, actions generated by your views such as clicks and key presses must go through an intermediate layer which React calls the dispatcher. This dispatcher decides how to interpret the action and what changes, if any, should be made to your application state. React documentation refers to the state of your application as the store.

React data flow flowchart. Action points to dispatcher, which points to store, which points to view. View then points to another action, which points back to dispatcher.

React does not have an opinion on what dispatcher and store you should use, it only provides the capability to convert your state into updates for the browser. You can write your own dispatcher and store, or use one of the many options available as open source projects. In this course, you will start off writing your own and then transition into using Redux.

Virtual DOM
React makes sure that the render function's output is what the page actually contains. This may involve adding elements, removing elements, or updating elements in-place. These are the kind of operations that traditionally jQuery is used for. Unfortunately, making updates to the DOM can be slow, and multiple unnecessary updates can severely impact the responsiveness of a site, especially as the number of updates grows. This was one of the driving factors for motivating Facebook to develop React. With React they were able to minimize the amount of updates being performed and bring the performance of the page back to a reasonable point.

To build up a minimal list of operations to be performed on the DOM, React needs to be able to compare what is currently in the DOM to what should be there. To support this, the render function does not output HTML or make changes to the DOM directly. Instead, it outputs a data structure known as a Virtual DOM. This virtual version of the DOM is greatly simplified and very fast to work with. React then checks the virtual DOM against the real DOM in the browser and makes a list of updates to perform. Since DOM manipulation is a slow process, this ensures that only elements that have genuinely changed are updated. There are many Virtual DOM based systems available in the JavaScript ecosystem, but React is by far the most commonly used.

>>> React DOES manipulate the browser's DOM to matchk the shape of the content based upon the application state.

Frameworks and Libraries
You may have encountered the terms framework and library. Both of these terms describe "code someone else wrote that is not part of your application". Generally speaking, a library is a collection of functionality that is meant to be integrated into your application. Each part of a library is relatively isolated and can be brought in piece-by-piece. Frameworks, on the other hand, work by having your application embedded inside them. In this way, frameworks dictate much, if not all, of how your application is structured. This has both benefits and drawbacks.

Framework vs Library metaphor:: like A highway vs off road
Highway advantages (Framework)
	get there faster
	less chance of making a mistake
	known rules
Highway Disadvantages
	Can only use it the way its intended (going the long way bc its the road and you cant cut across)
	you have to know the rules
	not everything is necessary
Off-roading advantages (libraries)
	you can drive however you want
	you can take as long or as short as you want to get ther
	you arrent forced to go to a place that you dont want to go
Off-roading disadvantages
	it can be slower
	you have to be prepared for the (wild) conditions
	you could end up just stuck



Benefits
By dictating much of how your application will work, frameworks are great at taking shortcuts by providing simpler ways of adding difficult functionality to your projects. It also reduces the amount of work you need to get started on a project.

Libraries, on the other hand, don't dictate how they are used. When working on a project, you choose how to bring them into your application and what parts you would like to use. As such, you must hook up all the necessary parts yourself, which often means that getting started with a library is a bit slower.

Drawbacks
When using frameworks, decisions are made up front that allow and define the shortcuts to be taken in a project. By doing this, it will restrict the choices you have within your project. Conventions are great until you want to break them, and in some frameworks, stepping outside the dictated path can be quite tricky.

Libraries, however, have very few built-in decisions, so you're at much greater liberty to use it just the way you want to. You can use a single function from a library or use all of what is provided. When using libraries, you also have the option to use multiple libraries together in ways the original authors had no intention of.

Metaphor
Think of a framework as a workout class. You use the equipment the instructor wants you to use, and you do the exercises the instructor chooses. Compare this to going to a gym and having all the machines available to you. You decide what equipment to use and how to use it yourself. This is how Libraries work. The class is nice because you just show up and put in the work, but you trust that the instructor has put together a reasonable routine. But just going to the gym and using the available equipment is useful because you get to work on exactly what you want, and for as long as you would like by making up your own workout.

React Setup
Now that you have a general idea of what React is and how it works, the next step is to install a starter project provided for you. You will be working in this project throughout the next several lessons, so it is important to not skip this page.

For this course, create a folder in your SoftwareDevelopment folder named FEFReact. Please add all projects to this folder to help keep yourself organized. You will be creating projects to practice the code from the lesson and projects for your Hands-On solutions. As you move through this course, you will be asked to create projects with specific names, so please add these projects into the FEFReact folder. To create this folder, follow the steps below:

Open up your command prompt/terminal.

Run the following to navigate to your Desktop

cd Desktop
Next, navigate to the SoftwareDevelopment directory in your terminal.

cd SoftwareDevelopment
You created this folder in your Front-End Foundations course. If you do not have this folder follow the directions below:
Create a root folder on your desktop and name it SoftwareDevelopment.
mkdir SoftwareDevelopment
Next, navigate to the SoftwareDevelopment directory in your terminal.
cd SoftwareDevelopment
Create a new folder within your SoftwareDevelopment folder and name it FEFReact. (This folder will hold all your coursework for this course)

mkdir FEFReact
Then, navigate to the FEFReact directory in your terminal.

cd FEFReact
Great! Now you have a folder to house all of the projects for this course. Remember to create projects when asked and make sure they live in this folder!

Project Setup
For this course, you will be using a starter project that is provided for you. To install this project, follow the below steps. Make sure you are still in the FEFReact directory:

Start off by downloading the starter project and unzipping it. The starter project will be in a folder named React.

Starter Project

You will be using Node 6 and Npm 4.
You can check which version you have of each of these by running the following commands using the terminal (OSX, Linux) / command prompt (Windows)
node --version
npm --version
If you don't have Node or you have an older version, you can get the latest version at their website.
Npm is included with Node, but if you have an older version you can update it using the following command:
$ npm install npm@latest -g
Next, rename the starter project folder from React to ReactL01 and move it to your FEFReact folder.

Now, navigate to the ReactL01 directory in your terminal.

cd ReactL01
Now that you are in the ReactL01 directory, run the following:

npm install
Caution!
If you are getting this error saveError ENOENT: no such file or directory, open '/Users/username/Desktop/React-Course/test/package.json, that means you are not in the correct directory with a package.json file. Please make sure you are in the correct directory.

Once npm has finished installing, you can test that the server is working with the following command:

npm start
You should now see your browser open up a blank page with an alert box saying "It's alive!".

Tip!
You can stop this process by pressing Control + C in the terminal, but for now, keep the server running.

While working on this course, you will want to have the npm start process running, since it takes care of packaging up files needed to view the project in your browser. When you make a change in the project, you will see new text appear in the terminal and the browser window that was launched will reload automatically. This is a process called hot reloading and is very useful when developing as it lets you see your changes very quickly.

Rendering with React
A React Element is the smallest building block in React. The virtual DOM is a tree structure comprised of a root element that contains other elements. This tree of virtual DOM elements is immutable, meaning that it can't be changed after creation. This allows React to keep previous versions of the virtual DOM to compare against when updates are made to help ensure only the minimal amount of work is performed.

Project Structure
Open up the ReactL01 project you previously downloaded. You will be following along in this lesson and adding code to this project. Under the public folder, you should see an index.html file. After opening the file, you should see the following:

index.html file:

<!doctype html>
<html>
    <head>
        <title></title>
    </head>
    <body>
        <div id="root"></div>
        <script src="bundle.js"></script>
    </body>
</html>
Above, you have a basic HTML page structure. Inside the <body> tag, there is a <div> tag with an id of root. You will be working with this <div> tag shortly. Also within the <body> tag, there is a script tag. This project has already been configured to use webpack to bundle all your project's files and dependencies into a single bundle.js file. The script tag points to the bundle.js file. When you run npm start from the project directory, the webpack process is started, and it monitors any changes to your files and rebuilds the bundle.js file for you. This means you can add many JavaScript files to your src directory and they will all be available in your final page. However, you won't be directly working in the bundle.js file but in the index.js file within the src folder within your project.

Next, open up the index.js file located within the src folder. As you can see, there is an alert in that file along with nothing else. This is there to show that the project is up and running. Go ahead and remove that line of code so the index.js file is now empty.

To start using React, you need to make sure it has been imported into the index.js file, which is the file you will be writing within. This is an essential piece of React because without importing it, it will not work.

Go ahead and add the following to the index.js file.

src/index.js file:

import React from 'react';
Great! Now your JS file is now ready for some React!


Rendering with React - Continued
Create Element
The React.createElement() method is very useful because it creates new elements for you on the page rather than having to add the elements into your index.html file.

Below, the React.createElement() method takes in three parameters: type, props, and children.

import React from 'react';

React.createElement('h1', {}, 'Hello World!');
In the above createElement() method, the type is the HTML tag you want to create, in this case, an h1 tag. Props (stands for properties) are objects that get added to the element. They can be used to add class and id names or other attributes to the element created. Later on in this module, props will serve a larger purpose. For the current example, this object is empty to visualize creating a basic element. Later on, you will see it being used. Children are zero or more elements that are nested inside the element. In this case, you are providing some plain text as a child of the h1 tag.

Great! If you add the new createElement() method to your code, nothing will happen. That is because you are missing a piece to make this code work.

ReactDOM
createElement builds a virtual DOM element, but to get React to update the page based on it, you must use the render function from the react-dom package. To start, you need to import the ReactDOM package as you did with React itself. Add the import statement so your code now looks like below:

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

React.createElement('h1', {}, 'Hello World!');
Next, you need to add the render() function that is included in the ReactDOM package. render() has two parameters. The first parameter is what you would like to render on the page. In this case, you want to render the React.createElement('h1', {}, 'Hello World!'); method you already have in your code. The second parameter is where you would want to render the createElement() method. If you remember, there is a <div> in the HTML file with an id of root. This is where you are going to render your newly created h1 element by using document.getElementById('root').

Create the ReactDOM.render() method and move the React.createElement('h1', {}, 'Hello World!'); inside it along with the document.getElementById('root'). Your index.js should now look like below:

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  React.createElement('h1', {}, 'Hello World!'),
  document.getElementById('root')
);
Caution!
Be careful to notice that there is comma after the createElement() method instead of a semicolon. If you forget to change this, you will get an error.

The above code tells React to find an element on the page with an id of root and replace its contents with your newly created element.

Try It!
Add the above code to your index.js file and navigate to localhost:8080. The page will automatically update and you should now see "Hello World!".

>> the virtual DOM of React is immutable and CANNOT be altered or changed.
>> when using the createElement() method of React to create and element, the parameteers of the method and their appropriate order is :: type, properties, children.
>> properties (props) :: the parameter of createElement() used to provide info about the new ele such as an ID and class
>> there can be no elements def for the "children" param of the createElement() method in React

Props and Children
Time to dive a little bit deeper in how you can use props and children in the React.createElement() method.

First, you will begin with Children. You will be continuing with the code you have previously written in this lesson.

Children
Now, say you wanted to render the created <h1> element inside of a new element. First, you would need to create the new element (<div> in this case) in a new React.createElement() method. Again, you will be using an empty object as props. You could then set the <h1> element you created earlier as a child (the third parameter) of the new <div> element.

Try It!
Try creating this new element within the ReactDOM.render() method. See what how close you can get and if you get stuck, the code is located below.

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  React.createElement('div', {}, React.createElement('h1', {}, 'Hello World!')),
  document.getElementById('root')
);

Props and Children - Continued
Props
Now, you will look at an example of adding a class name to the <h1> element you have created. The syntax for this is shown below:

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  React.createElement(
    'div',
    {},
    React.createElement('h1', { className: 'flowers' }, 'Hello World!')
  ),
  document.getElementById('root')
);
As you can see above, you added a class name of flowers to the <h1> tag that lives within a <div>. It is fairly simple; you just need to know the attribute name within React. If you used the word class instead of className, you would get an error. That is because the class keyword is tied directly to JavaScript and will not work in React.

Another example would be to use the a (anchor) element which requires using the href attribute. The below code creates an a element which then redirects the user to www.google.com.

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  React.createElement(
    'a',
    { href: 'https://www.google.com' },
    'Take me to Google.com!'
  ),
  document.getElementById('root')
);
Caution!
Notice how the href to www.google.com is written as "https://www.google.com". The https:// will ensure that the user is taken to that specific website. If it was written like "www.google.com", React would try and point you to that path within the project rather then on the web.

Additional Info!
If you would like to read more about the attribute names used in React.createElement, please visit: ReactJ:: https://reactjs.org/docs/dom-elements.html

More Advanced Rendering
Time to take a look at creating some React elements based on slightly more complex elements.

Render Multiple Child Elements
If you wanted to render an unordered list of different types of fruit, you would do so in HTML like below:

index.html file:

<ul>
  <li>Apples</li>
  <li>Oranges</li>
  <li>Mangos</li>
</ul>
But how would you do that using React.createElement()? First, you would need to note what element you are creating, in this case, a <ul> element. Next, you would add any properties. For this example, continue using an empty object. Then, you would need three more React.createElement() methods to create the elements of each of the <li> elements along with the empty object and the name of each of the fruits.

Try It!
Try creating these new elements within the ReactDOM.render() method. See how close you can get and if you get stuck, the code is located below.

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  React.createElement(
    'ul',
    {},
    React.createElement('li', {}, 'Apples'),
    React.createElement('li', {}, 'Oranges'),
    React.createElement('li', {}, 'Mangos')
  ),
  document.getElementById('root')
);
After adding the above code to your index.js file, navigate back to localhost:8080. You should now see an unordered list of three fruits as shown below:

Apples
Oranges
Mangos
Tip!
Notice how the ul element has three createElements within. You can create many child elements within an element, like you did above.

More Advanced Rendering - Continued
Complex Element Nesting
Now, what if you wanted to add nested lists to show the price of each of the fruits? In HTML, you would do it like below:

index.html file:

<ul>
  <li>Apples</li>
    <ul>
      <li>$1.00 per lb</li>
    </ul>
  <li>Oranges</li>
    <ul>
      <li>$.70 per lb</li>
    </ul>
  <li>Mangos</li>
    <ul>
      <li>$2.00 per lb</li>
    </ul>
</ul>
If you wanted to do this in React, you would have to create elements within each of the <li> elements within the <ul> element. This will create nesting within the list. The code is shown below:

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  React.createElement(
    'ul',
    {},
    React.createElement(
      'li',
      {},
      'Apples',
      React.createElement(
        'ul',
        {},
        React.createElement('li', {}, '$1.00 per lb')
      )
    ),
    React.createElement(
      'li',
      {},
      'Oranges',
      React.createElement(
        'ul',
        {},
        React.createElement('li', {}, '$.70 per lb')
      )
    ),
    React.createElement(
      'li',
      {},
      'Mangos',
      React.createElement('ul', {}, React.createElement('li', {}, '$2.00 per lb'))
    )
  ),
  document.getElementById('root')
);
Add the above code into your index.js file. You should now see the below:

Apples
$1.00 per lb
Oranges
$.70 per lb
Mangos
$2.00 per lb


More Advanced Rendering - Continued
Using Variables
As with many programming tasks, you can make the problem easier to tackle by breaking it down a bit. In this case, you can break out some of the parts you are rendering into variables.

Now, consider how your code would look if you set each of the fruit React.createElement() methods to a variable.

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

const apples = React.createElement(
  'ul',
  {},
  React.createElement('li', {}, '$1.00 per lb')
);
const oranges = React.createElement(
  'ul',
  {},
  React.createElement('li', {}, '$.70 per lb')
);
const mangos = React.createElement(
  'ul',
  {},
  React.createElement('li', {}, '$2.00 per lb')
);

ReactDOM.render(
  React.createElement(
    'ul',
    {},
    React.createElement('li', {}, 'Apples', apples),
    React.createElement('li', {}, 'Oranges', oranges),
    React.createElement('li', {}, 'Mangos', mangos)
  ),
  document.getElementById('root')
);
That certainly cleans up your code! If you navigate to localhost:8080, it will update the page but will look exactly the same. How about you take it a step further. Now, you want to create variables for each of the prices to then use in each of the fruit variables. Consider below:

src/index.js file:

import React from 'react';
import ReactDOM from 'react-dom';

const applesPrice = React.createElement('li', {}, '$1.00 per lb');
const apples = React.createElement('ul', {}, applesPrice);

const orangesPrice = React.createElement('li', {}, '$.70 per lb');
const oranges = React.createElement('ul', {}, orangesPrice);

const mangosPrice = React.createElement('li', {}, '$2.00 per lb');
const mangos = React.createElement('ul', {}, mangosPrice);

ReactDOM.render(
  React.createElement(
    'ul',
    {},
    React.createElement('li', {}, 'Apples', apples),
    React.createElement('li', {}, 'Oranges', oranges),
    React.createElement('li', {}, 'Mangos', mangos)
  ),
  document.getElementById('root')
);
Caution!
Notice how the variables for the fruit's pricing is located above each of the fruit variables. This is because code is read from top to bottom. So, if the pricing variables were located under the fruit variables, they would not be read in time to render within the fruit variables.

Using variables this way can help reduce the amount of nesting that is needed, but it is not the most ideal way to handle this. During the next lesson, you will look at a templating system named JSX designed to make this process more natural to work with.

Additional Info!
If you would like to read more about this subject, please visit Facebook's React documentation on displaying elements::https://reactjs.org/docs/rendering-elements.html

>>>>>>> you need to predef a const before you use it<<<<<<<<<<<
****see snippit below, fruitPrice has to be def before fruit can use it as a var.

import React from 'react';
import ReactDOM from 'react-dom';

const applePrice=React.createElement('li',{}, '$1.00 per lb');
const orangePrice=React.createElement('li',{}, '$0.70 per lb');
const mangoPrice=React.createElement('li',{}, '$2.00 per lb');

const apples=React.createElement('ul', {}, applePrice);
const oranges=React.createElement('ul', {}, orangePrice);
const mangos=React.createElement('ul', {}, mangoPrice);

ReactDOM.render(
         React.createElement(
                  'ul', 
                  {}, 
                  React.createElement('li', {}, 'Apples', apples), 
                  React.createElement('li', {}, 'Oranges', oranges), 
                  React.createElement('li', {}, 'Mangos', mangos)
         ), 
         document.getElementById('root')
);

*****************************************************************************************



Keyword	Description
React	A library for performing efficient updates to a web page.
React.createElement()	A React method that creates new elements on the page rather than having to add the elements into the index.html file.
ReactDOM	A package needed to render the React.createElement() correctly.
render()	A method included in the ReactDOM package that allows to render elements onto the webpage.
