Overview
Routing is conditional rendering based on the state of your application. This means, in its purest form, routing in React is changing what is being rendered based on where you are in the application. If you go to a website and click on a tab in the navigation bar, for example, you will notice that the URL changes. This is essential to being able to navigate a website.

So far, you have been writing your components all within one file. In a real-world application, the unspoken rule is "one component per file". This makes your application very organized and readable. During this lesson, you will be learning how to route between multiple pages and how locating each component within its own file works.

Before diving deeper into React Routing, follow the setup instructions on the following page.

Routing - Continued
Header Component
Now that you have the necessary file structure setup, you are now going to create the components needed for a webpage that has three pages. You are going to start with the Header component that will be in charge of the location of the pages you will be navigating to. Follow the steps below to create the Header component:

Within the components folder, create a file named Header.js

This component will be used on all your screens and will be acting as your navigation bar.
Next, import React, like below:

Header.js file:

import React from 'react';
Now, create the actual Header component, shown below:

Header.js file:

import React from 'react';

const Header = ({ title }) => (
  <div>
    <a href="/">Home</a>
    <a href="/about">About</a>
    <a href="/topics">Topics</a>
    <h1>{title}</h1>
  </div>
);
Within this component are the actual links to each of the pages (to be created momentarily) along with an <h1> tag. This is where you will be able to define the title of each of the pages.
Lastly, you need to export this component so it is accessible elsewhere in your app

Header.js file:

import React from 'react';

const Header = ({ title }) => (
    <div>
    <a href="/">Home</a>
    <a href="/about">About</a>
    <a href="/topics">Topics</a>
    <h1>{title}</h1>
    </div>
);

export default Header;
Tip!
This is always needed when you have one component per file.

If you didn't notice, the Header component does not have props. Instead, it has been written to receive a destructured object. The { title } indicates that the Header component wants the title property of the props object; it can be accessed like a normal function parameter without the need for props.title, as you can see in the h1 element. If props had been used, the h1 element would change to <h1>{props.title}</h1>. This is also referred to as destructuring assignment syntax:

"The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables." - MDN

Needed Components
Next, you are going to create the components needed for each page. These components will not have anything within them just yet; you will just want to set up the structure for now.

Individual Page Components
The first thing you need to do is create three new files within the screens folder within your project:

Home.js
About.js
Topics.js
Next, add the following code to their respective files:

Home.js file:

import React from 'react';

const Home = () => {};

export default Home;
About.js file:

import React from 'react';

const About = () => {};

export default About;
Topics.js file:

import React from 'react';

const Topics = () => {};

export default Topics;
Notice how each of the files have an export default line at the end? As noted before, that is necessary when components live within their own files. It allows them to be accessible by other files in your project.

Needed Components - Continued
Using the Header Component
Now, you need to write the code necessary to use the Header component you created earlier. Just like a standard HTML navbar, you have a series of anchor tags with the routes for your other pages. Since you are working in React and creating a Single Page Application (SPA), these will be referred to as screens. In HTML, you usually put your navbar on every page, so you will be doing the same thing with all your screens (Home.js, About.js, and Topics.js). To do this, you will need to import the Header into each of these files, just like you have imported React.

Add the following line of code to each of your files to import the Header component:

import Header from '../components/Header';
Tip!
The ../ syntax specifies that the Header component lives within the components folder within your project.

Now that the Header component has been imported, the nav bar will now show up on each of your pages.

The last thing you need to do with your pages is define what the title will be. Remember how the Header component had a title property that was located in an <h1> tag? Well, now you can use that Header component and define what you want the title to be in each of your pages' components. Add the following code to the respective files:

Home.js file:

import React from 'react';
import Header from '../components/Header';

const Home = () => <Header title="Home" />;

export default Home;
About.js file:

import React from 'react';
import Header from '../components/Header';

const About = () => <Header title="About" />;

export default About;
Topics.js file:

import React from 'react';
import Header from '../components/Header';

const Topics = () => <Header title="Topics" />;

export default Topics;
Now within each of your screens you are able to see the nav bar (created in the Header component) as well as the title for each page.


Routing With Switch/Case
As always in a React file, you need to import your dependencies. Below is what is needed in your App component. Firstly, you are importing React itself. Next, you are importing the render method from react-dom. This way, you can call the render method with render() instead of ReactDOM.render(). Lastly, you are importing each of the screens from the screens folder.

Tip!
The above src/index.js is considered a file path which provides the location of different files. src/index.js means that the index.js file is located within the src folder.

index.js file:

import React from 'react';
import { render } from 'react-dom';
import Home from './screens/Home';
import About from './screens/About';
import Topics from './screens/Topics';
Next, you will need to build out the functionality that is going to allow you to switch between your screens as the user clicks on the buttons in your navbar. What better way to switch between screens than a switch statement?

const Index = ({ pathname }) => {
  switch (pathname) {
    case '/about':
      return <About />;
    case '/topics':
      return <Topics />;
    default:
      return <Home />;
  }
};

let pathname = window.location.pathname;

ReactDOM.render(<Index pathname={pathname} />, document.getElementById('root'));

window.addEventListener('popstate', () => {
  pathname = window.location.pathname;
});
The above code is how you are handling the user switching between your components when the URL on your site changes. A function is created named Index, which you are then passing in pathname. If you look a little further down the code, you can see that pathname is set to whatever the URL is. Back within the function, the switch case statement then uses pathname to determine which component to use and render. Next, you will call the render() method, and that is where you are rendering this component. The last part of the file is the event listener that will update your pathname variable every time you change the URL.

Try It!
Make sure you have added all of the code up until this point to your project. You should now see on localhost:8080 the three anchor tags you have created and be able to navigate between those pages.

React Router
Now that you have an idea of basic routing you can bring a package in that helps with React routing. react-router-dom is a package built to help you manage your routes for you. Before you dive into this, follow the setup instructions below.

Setup
For this example, you are going to use a new project. Follow the below steps:

Start off by downloading the starter project and unzipping it. The starter project will be in a folder named React.

Starter Project

Next, move the starter project folder to the FEFReact folder and rename it from React to ReactRouter.

Open up your terminal/command prompt.

Run the following to navigate to your Desktop

cd Desktop
Next, navigate to the SoftwareDevelopment directory in your terminal.

cd SoftwareDevelopment
Then, navigate to the FEFReact directory in your terminal.

cd FEFReact
Now, navigate to the ReactRouter directory in your terminal.

cd ReactRouter
Open this folder within Visual Studio Code

Within the src folder, add the following:

A screens folder
Within the screens folder, add the following files:

Home.js file
About.js file
Topics.js file
Topic.js file
Now that you are in the ReactRouter directory, run the following:

npm install
Caution!
If you are getting this error saveError ENOENT: no such file or directory, open '/Users/username/Desktop/React-Course/test/package.json, that means you are not in the correct directory with a package.json file. Please follow steps 4-7 to make sure you are in the correct directory.

Your project file structure should now look like the following:


React Router - Continued
Add Code To Your Screens
Next, you will need to add the code needed for each of the screens so you can view the title of each page. Add the below code to the respective files:

Home.js file:

import React from 'react';

const Home = () => (
  <div>
    <h2>Home</h2>
  </div>
);

export default Home;
About.js file:

import React from 'react';

const About = () => (
  <div>
    <h2>About</h2>
  </div>
);

export default About;
Topics.js file:

import React from 'react';

const Topics = () => (
  <div>
    <h2>Topics</h2>
  </div>
);

export default Topics;
Topic.js file (you will explore the below code soon):

import React from 'react';

const Topic = ({ match }) => (
  <div>
    <h3>{match.params.topicId}</h3>
  </div>
);

export default Topic;
Tip!
Notice how this is different from what you have previously done in this lesson? You no longer have a component named Header that takes care of the nav bar. That is what you are going to do next!


Using React-Router-Dom
Now that you have your project set up, time to start using the react-router-dom package. This will help manage the routes for you. One of the parts that make React so awesome!

<Router> and <Route>
It starts with just two main parts: the Route and Router elements. <Route /> is used to map your routes and <Router /> will do the actual routing. You can specify the URL needed to render the specified component. To do this, you would declare a path as well as the component to be rendered.

Additional Info!
The Router component mentioned above is an alias of the BrowserRouter component that's in the react-router-dom package. The keyword as in the import statement is what is used to set an alias, as you can see below in the code sample.

When using the <Route /> and <Router /> elements, they work together, as well as live within the main component — App.

You will need to create the main component for your project as shown below. This will be used to house your functionality and display the various screens. This main component will be named App and will live within the existing src/index.js file.

Consider the following code:

import React from 'react';
import ReactDOM from 'react-dom';
import Home from './screens/Home';
import About from './screens/About';
import Topics from './screens/Topics';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';

const App = () => (
  <Router>
    <div>
      <Route exact path="/" component={Home} />
      <Route path="/about" component={About} />
      <Route path="/topics" component={Topics} />
    </div>
  </Router>
);

ReactDOM.render(<App />, document.getElementById('root'));
Within the App main component, the <Router> element exists. This holds the map of the routes, using the <Route> element. The URL path is noted by the path attribute. The component you want to use for that particular path is located within the curly braces ({}) in the component attribute.


Using React-Router-Dom - Continued
The Link Component
Right now, your code works, but there is no way for the user to see the routes on the webpage. You will need to add some JSX so you can navigate your website.

You are going to add the JSX right into your main component, App. It will live within the <Router> and <div> elements, as it is an important part of the routing. For this example, you will use a basic unordered list and the Link component you imported earlier. Add the new code so your index.js file looks like the following:

index.js file:

import React from 'react';
import { render } from 'react-dom';
import Home from './screens/Home';
import About from './screens/About';
import Topics from './screens/Topics';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';

const App = () => (
  <Router>
    <div>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/about">About</Link>
        </li>
        <li>
          <Link to="/topics">Topics</Link>
        </li>
      </ul>

      <hr />

      <Route exact path="/" component={Home} />
      <Route path="/about" component={About} />
      <Route path="/topics" component={Topics} />
    </div>
  </Router>
);

render(<App />, document.getElementById('root'));
Fun Fact!
The HTML element <hr /> is an easy way to add a line on your webpage.

With the above code, you are creating an unordered list <ul> which will allow the user to navigate your site. Each Link component takes a to prop set to a string indicating the route the user can navigate to. This will create an anchor tag with the href attribute to apply to the DOM.

Add the code above to your project and see how you can navigate through your pages!

Sub Navigation
Now you can add some code to the Topics.js page that adds code to the /topics URL. After this section, you will be able to click on one of the anchor tags on the Topics page and it will change the information on the Topics page.

Match
During this section, you will be learning how the match object helps with routing. The two files you will be working with are Topics.js and Topic.js. The Topics.js file will handle the navigation of the topics, and the Topic.js will handle what is displayed for each of the topics.

At the top of your Topics.js file, add the following dependencies under the import React from 'react' statement:

import Topic from './Topic';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';
The first import statement is importing the information located in the Topic.js file, which you will explore in a minute. The second import statement is importing the Router, Route, and Link elements from the react-router-dom packages. The Link element is a React component that helps with navigation. Take a look at how it works.

Consider below:

Topics.js file:

import React from 'react';
import Topic from './Topic';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';

const Topics = ({ match }) => (
  <div>
    <h2>Topics</h2>
    <ul>
      <li>
        <Link to={`${match.url}/rendering`}>Rendering with React</Link>
      </li>
      <li>
        <Link to={`${match.url}/components`}>Components</Link>
      </li>
      <li>
        <Link to={`${match.url}/props-v-state`}>Props v. State</Link>
      </li>
    </ul>

    <Route path={`${match.url}/:topicId`} component={Topic} />
    <Route
      exact
      path={match.url}
      render={() => <h3>Please select a topic.</h3>}
    />
  </div>
);

export default Topics;
The above Topics component starts out by bringing in something called match. match is an object provided to you by React that contains information about how the <Route path> matched the URL. This object contains the following properties:

params - an object that contains the key/value pairs that can change on the URL.
isExact - a boolean that is true if the entire URL was matched.
path - a string that contains the path pattern used to match. This is useful when you are building nested <Route> components.
url - a string that contains the matched portion of the URL. Useful when building nested <Link> components.
Within the above Topics component, you can see that the <Link> component is using match.url to match the URL and add the corresponding path to the respective button clicked. Once the button is clicked, the <Route> component matches that certain URL and then uses the Topic component to show the information on the page. The Topic component is set up to show the same text as each topic's URL. So, if you click on "Rendering with React", you should see "rendering" on the page. Lastly, if a topic hasn't been clicked on yet, the user will see "Please select a topic."

Great work! Make sure to add all of this code into your project. When you click on the Topics page, you should be able to choose between three different topics that will render different text.

Additional Info!
If you would like to read more about React Router, please visit: https://reacttraining.com/react-router/.


>>>>Instead of setting its component property, a Route can also specify JSX to be renderd using the render property.
A <Route> obejct must have its path and ocmponent properties set. No that is false

Key Terms
Below is a list and short description of the important keywords you have learned in this lesson. Please read through and go back and review any concepts you do not fully understand. Great Work!

Keyword	Description
react-router-dom	A built-in React package that helps with routing.
<Route />	Used to map routes within a webpage.
<Router />	Handles the actual routing.
<Link />	Primary component used when navigating a webpage. This component will render a fully accessible anchor tag.
match	An object that contains information about the <Route path>








